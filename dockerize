#!/bin/bash
# Make it easy to run development activity out of a container.
# Whereever you install this as "dockerize" that is where it will create its links.
# execwdve should be installed to the same location

usage() {
	cat <<-EOT >&2
	Usage: dockerize install <container> [<command>]...
	       dockerize stop <container>
	       dockerize upgrade
	if container == command then no further arguments are necessary.
	EOT
}

fail() {
	echo "$@"
	exit 1
}

home=$HOME
os=$(uname -s)
pwd=${PWD}
bindir=$(dirname $0)
execwdve=${bindir}/execwdve
if [ -n "$USERPROFILE" ]; then
  execwdve=${USERPROFILE}/bin/execwdve
  pwd=${PWD/\/mnt/}
  os=Windows
  home=$USERPROFILE
fi

# Attempt to find a file in parent directories or the home directory.
# we use this to locate eg. .ruby-version
loadup() {
  path="$(pwd)"; while [ -n "${path}" -a ! -e "${path}/$1" ]; do path="${path%/*}"; done
  test -z "${path}" -a -e "${home}/$1" && path="${home}"
  test -n "${path}" && echo -n "$(<${path}/$1)"
}

[[ $(ssh-add -l) =~ ^[[:digit:]]*.*\)$ ]] || fail "You must ssh-add your key to the system agent first."

# call as get_environment_$(uname -s)
get_environment_Darwin() {
	local env
	env="SHLVL=.*
_=.*
PATH=.*
DOCKER_HOST=.*
SSH_AUTH_SOCK=.*
SSH_AGENT_PID=.*
LS_COLORS=.*
OLDPWD
PWD=.*"
	export | cut -d' ' -f3- | sed -e 's/="/=/' -e 's/"$//' | grep -x -v -f <(echo "${env}")
}

get_environment_Linux() {
	local env
	local ppid
	ppid=$PPID
	test "$ppid" -eq 0 && ppid=1
	env="$(cat /proc/$ppid/environ 2>/dev/null | tr "\0" "\n")
SHLVL=.*
_=.*
PATH=.*
DOCKER_HOST=.*
SSH_AUTH_SOCK=.*
SSH_AGENT_PID=.*
LS_COLORS=.*
PWD=.*"
	env | grep -x -v -f <(echo "${env}")
}

get_environment_Windows() {
  get_environment_Linux
}

pinata_location() {
	local sock
	sock=$(<~/.pinata-sshd/agent_socket_path)
	echo "-v ${sock}:/tmp/ssh-agent.sock -e SSH_AUTH_SOCK=/tmp/ssh-agent.sock -e PINATA_SOCK=${sock}"
}

docker_tty='-i'
[ -c /dev/fd/0 -a -c /dev/fd/1 ] && docker_tty='-it'

pinata_mount_Linux() {
	if [ -n "$PINATA_SOCK" ]; then
		pinata="-v $PINATA_SOCK:$SSH_AUTH_SOCK -e PINATA_SOCK -e SSH_AUTH_SOCK"
	else
		pinata="-v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK -e SSH_AUTH_SOCK"
	fi
	echo "$pinata"
}

pinata_mount_Darwin() {
	pinata=$(docker ps -qf name=pinata-sshd)
	# try to resolve pinata-ssh automatically
	if [ -z "$pinata" -o ! -f ~/.pinata-sshd/known_hosts ]; then
		pinata-ssh-forward 1>&2
		pinata=$(docker ps -qf name=pinata-sshd)
		if [ -z "$pinata" -o ! -f ~/.pinata-sshd/known_hosts ]; then
			echo "running without pinata-ssh-forwarding. github requests may fail:" >&2
			echo "$result" >&2
			pinata=""
		else
			# Manage race condition between pinata-ssh-forward and pinata-ssh-mount
			echo "waiting for pinata to finish setting up" >&2
			while [ ! -e ~/.pinata-sshd/agent_socket_path ]; do sleep 0.1; done
			pinata="$(pinata_location)"
		fi
	else
		pinata="$(pinata_location)"
	fi
	echo "$pinata"
}

pinata_mount_Windows() {
  pinata_mount_Darwin
}

command=$(basename $0)
container=$(readlink $0)
container=${container:-$command}
containerpath=${bindir}/$container
case $command in
	with)
		command=""
		container=$1
		shift
		;;
	dockerize)
		# Usage
		[ $# -lt 1 ] && usage
		cmd=$1
		case "$cmd" in
		stop)
			[ $# -lt 2 ] && usage
			command=""
			container=$2
			clean_container=${container//\//__}
			container_version="$(loadup .$(basename ${container})-version)"
			container_version="${container_version#$(basename ${container})-}"
			container_version="${container_version:-latest}"
			instance=$(docker ps -qf name=${clean_container}_${container_version} | head -1)
			test -z "$instance" || ( docker stop $instance; docker rm $instance ) | head -1
			exit 0
			;;
		upgrade)
			# Self upgrade
			currentinode=$(ls -i ${bindir}/dockerize | cut -f1 -d' ')
			test -d ${bindir}/.dockerize.git || \
				git clone --mirror git@github.com:FutureAdvisor/dockerize ${bindir}/.dockerize.git
			git --git-dir ${bindir}/.dockerize.git fetch --prune
			if diff <(git --git-dir ${bindir}/.dockerize.git show master:dockerize) $0 >/dev/null; then
				echo "up to date"
			else
				git --git-dir ${bindir}/.dockerize.git show master:dockerize > $0
				newinode=$(ls -i ${bindir}/dockerize | cut -f1 -d' ')
				if [ "$newinode" -ne "$currentinode" ]; then
					for file in $(find ${bindir} -inum $currentinode -a ! -name dockerize); do
						rm $file
						ln ${bindir}/dockerize $file
					done
				fi
				exec "$0" "$@"
			fi
			;;
		install)
			# Install new software
			[ $# -lt 2 ] && usage
			container=$2
			shift 2
			test ! -e ${bindir}/${container} && ln ${containerpath} ${bindir}/${container}
			for cmd in "$@"; do
				test ! -e ${bindir}/${cmd} && ln -s ${container} ${bindir}/${cmd}
			done
			;;
		*)
			usage
		esac
		exit 0
esac

clean_container=${container//\//__}
container_version="$(loadup .$(basename ${container})-version)"
container_version="${container_version#$(basename ${container})-}"
container_version="${container_version:-latest}"
test -f ${bindir}/dockerize.postup && container_postup=${bindir}/dockerize.postup
container_volumes="-v $home:$home -v ~/.ssh:/root/.ssh -v ~/.ssh/known_hosts:/etc/ssh/ssh_known_hosts -v ${execwdve}:/bin/execwdve:ro"
environment="-e HOME=$home"
test -f ${containerpath}.defaults && . ${containerpath}.defaults
instance=$(docker ps -qf name=${clean_container}_${container_version} | head -1)
if [ -z "$instance" ]; then
	container_volumes="$(pinata_mount_$os) $container_volumes"
	container_volumes=$(eval echo "$container_volumes")
	cleanup=$(docker rm ${clean_container}_${container_version} 2>/dev/null)
	instance=$(docker run -td $container_volumes $environment --net local --name ${clean_container}_${container_version} $container:$container_version cat)
	sleep 0.5
	test -n "$container_postup" && docker exec ${docker_tty} $instance /bin/execwdve "${pwd}" sh -c "$container_postup"
fi
# Use \n as the delimiter to process array items
IFS=$'\n' env=($(get_environment_$os))
exec docker exec ${docker_tty} $instance /bin/execwdve "${env[@]}" "${pwd}" $command "$@"
